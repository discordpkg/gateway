package intent

// Code generated - This file has been automatically generated by _dev/main.go - DO NOT EDIT.

import (
	"github.com/andersfylling/discordgateway/event"
)

type Type int

const (
	// DirectMessages
	//  value: DIRECT_MESSAGES
	//  events:
	//    - CHANNEL_PINS_UPDATE
	//    - MESSAGE_CREATE
	//    - MESSAGE_DELETE
	//    - MESSAGE_UPDATE
	DirectMessages = Type(1 << 12)
	// DirectMessageReactions
	//  value: DIRECT_MESSAGE_REACTIONS
	//  events:
	//    - MESSAGE_REACTION_ADD
	//    - MESSAGE_REACTION_REMOVE
	//    - MESSAGE_REACTION_REMOVE_ALL
	//    - MESSAGE_REACTION_REMOVE_EMOJI
	DirectMessageReactions = Type(1 << 13)
	// DirectMessageTyping
	//  value: DIRECT_MESSAGE_TYPING
	//  events:
	//    - TYPING_START
	DirectMessageTyping = Type(1 << 14)
	// Guilds
	//  value: GUILDS
	//  events:
	//    - CHANNEL_CREATE
	//    - CHANNEL_DELETE
	//    - CHANNEL_PINS_UPDATE
	//    - CHANNEL_UPDATE
	//    - GUILD_CREATE
	//    - GUILD_DELETE
	//    - GUILD_ROLE_CREATE
	//    - GUILD_ROLE_DELETE
	//    - GUILD_ROLE_UPDATE
	//    - GUILD_UPDATE
	//    - STAGE_INSTANCE_CREATE
	//    - STAGE_INSTANCE_DELETE
	//    - STAGE_INSTANCE_UPDATE
	//    - THREAD_CREATE
	//    - THREAD_DELETE
	//    - THREAD_LIST_SYNC
	//    - THREAD_MEMBERS_UPDATE
	//    - THREAD_MEMBER_UPDATE
	//    - THREAD_UPDATE
	Guilds = Type(1 << 0)
	// GuildBans
	//  value: GUILD_BANS
	//  events:
	//    - GUILD_BAN_ADD
	//    - GUILD_BAN_REMOVE
	GuildBans = Type(1 << 2)
	// GuildEmojisAndStickers
	//  value: GUILD_EMOJIS_AND_STICKERS
	//  events:
	//    - GUILD_EMOJIS_UPDATE
	//    - GUILD_STICKERS_UPDATE
	GuildEmojisAndStickers = Type(1 << 3)
	// GuildIntegrations
	//  value: GUILD_INTEGRATIONS
	//  events:
	//    - GUILD_INTEGRATIONS_UPDATE
	//    - INTEGRATION_CREATE
	//    - INTEGRATION_DELETE
	//    - INTEGRATION_UPDATE
	GuildIntegrations = Type(1 << 4)
	// GuildInvites
	//  value: GUILD_INVITES
	//  events:
	//    - INVITE_CREATE
	//    - INVITE_DELETE
	GuildInvites = Type(1 << 6)
	// GuildMembers
	//  value: GUILD_MEMBERS
	//  events:
	//    - GUILD_CREATE
	GuildMembers = Type(1 << 1)
	// GuildMessages
	//  value: GUILD_MESSAGES
	//  events:
	//    - MESSAGE_CREATE
	//    - MESSAGE_DELETE
	//    - MESSAGE_DELETE_BULK
	//    - MESSAGE_UPDATE
	GuildMessages = Type(1 << 9)
	// GuildMessageReactions
	//  value: GUILD_MESSAGE_REACTIONS
	//  events:
	//    - MESSAGE_REACTION_ADD
	//    - MESSAGE_REACTION_REMOVE
	//    - MESSAGE_REACTION_REMOVE_ALL
	//    - MESSAGE_REACTION_REMOVE_EMOJI
	GuildMessageReactions = Type(1 << 10)
	// GuildMessageTyping
	//  value: GUILD_MESSAGE_TYPING
	//  events:
	//    - TYPING_START
	GuildMessageTyping = Type(1 << 11)
	// GuildPresences
	//  value: GUILD_PRESENCES
	//  events:
	//    - PRESENCE_UPDATE
	GuildPresences = Type(1 << 8)
	// GuildScheduledEvents
	//  value: GUILD_SCHEDULED_EVENTS
	//  events:
	//    - GUILD_SCHEDULED_EVENT_CREATE
	//    - GUILD_SCHEDULED_EVENT_DELETE
	//    - GUILD_SCHEDULED_EVENT_UPDATE
	//    - GUILD_SCHEDULED_EVENT_USER_ADD
	//    - GUILD_SCHEDULED_EVENT_USER_REMOVE
	GuildScheduledEvents = Type(1 << 16)
	// GuildVoiceStates
	//  value: GUILD_VOICE_STATES
	//  events:
	//    - VOICE_STATE_UPDATE
	GuildVoiceStates = Type(1 << 7)
	// GuildWebhooks
	//  value: GUILD_WEBHOOKS
	//  events:
	//    - WEBHOOKS_UPDATE
	GuildWebhooks = Type(1 << 5)
)

const All Type = DirectMessages | DirectMessageReactions | DirectMessageTyping | Guilds | GuildBans | GuildEmojisAndStickers | GuildIntegrations | GuildInvites | GuildMembers | GuildMessages | GuildMessageReactions | GuildMessageTyping | GuildPresences | GuildScheduledEvents | GuildVoiceStates | GuildWebhooks | 0

var intentsToEventsMap = map[Type][]event.Type{
	DirectMessages: []event.Type{
		event.ChannelPinsUpdate,
		event.MessageCreate,
		event.MessageDelete,
		event.MessageUpdate,
	},
	DirectMessageReactions: []event.Type{
		event.MessageReactionAdd,
		event.MessageReactionRemove,
		event.MessageReactionRemoveAll,
		event.MessageReactionRemoveEmoji,
	},
	DirectMessageTyping: []event.Type{
		event.TypingStart,
	},
	Guilds: []event.Type{
		event.ChannelCreate,
		event.ChannelDelete,
		event.ChannelPinsUpdate,
		event.ChannelUpdate,
		event.GuildCreate,
		event.GuildDelete,
		event.GuildRoleCreate,
		event.GuildRoleDelete,
		event.GuildRoleUpdate,
		event.GuildUpdate,
		event.StageInstanceCreate,
		event.StageInstanceDelete,
		event.StageInstanceUpdate,
		event.ThreadCreate,
		event.ThreadDelete,
		event.ThreadListSync,
		event.ThreadMembersUpdate,
		event.ThreadMemberUpdate,
		event.ThreadUpdate,
	},
	GuildBans: []event.Type{
		event.GuildBanAdd,
		event.GuildBanRemove,
	},
	GuildEmojisAndStickers: []event.Type{
		event.GuildEmojisUpdate,
		event.GuildStickersUpdate,
	},
	GuildIntegrations: []event.Type{
		event.GuildIntegrationsUpdate,
		event.IntegrationCreate,
		event.IntegrationDelete,
		event.IntegrationUpdate,
	},
	GuildInvites: []event.Type{
		event.InviteCreate,
		event.InviteDelete,
	},
	GuildMembers: []event.Type{
		event.GuildCreate,
	},
	GuildMessages: []event.Type{
		event.MessageCreate,
		event.MessageDelete,
		event.MessageDeleteBulk,
		event.MessageUpdate,
	},
	GuildMessageReactions: []event.Type{
		event.MessageReactionAdd,
		event.MessageReactionRemove,
		event.MessageReactionRemoveAll,
		event.MessageReactionRemoveEmoji,
	},
	GuildMessageTyping: []event.Type{
		event.TypingStart,
	},
	GuildPresences: []event.Type{
		event.PresenceUpdate,
	},
	GuildScheduledEvents: []event.Type{
		event.GuildScheduledEventCreate,
		event.GuildScheduledEventDelete,
		event.GuildScheduledEventUpdate,
		event.GuildScheduledEventUserAdd,
		event.GuildScheduledEventUserRemove,
	},
	GuildVoiceStates: []event.Type{
		event.VoiceStateUpdate,
	},
	GuildWebhooks: []event.Type{
		event.WebhooksUpdate,
	},
}

var emptyStruct struct{}
var dmIntents = map[Type]struct{}{
	DirectMessages:         emptyStruct,
	DirectMessageReactions: emptyStruct,
	DirectMessageTyping:    emptyStruct,
}

func Valid(intent Type) bool {
	return intent >= 0
}

func Events(intent Type) []event.Type {
	if events, ok := intentsToEventsMap[intent]; ok {
		cpy := make([]event.Type, len(events))
		copy(cpy, events)
		return cpy
	}
	return nil
}

func Merge(intents ...Type) Type {
	var merged Type
	for i := range intents {
		merged |= intents[i]
	}
	return merged
}

func DMEventsToIntents(src []event.Type) Type {
	return eventsToIntents(src, true)
}

func GuildEventsToIntents(src []event.Type) Type {
	return eventsToIntents(src, false)
}

func eventsToIntents(src []event.Type, dm bool) (intents Type) {
	contains := func(haystack []event.Type, needle event.Type) bool {
		for i := range haystack {
			if haystack[i] == needle {
				return true
			}
		}
		return false
	}

	for i := range src {
		for intent, events := range intentsToEventsMap {
			if _, isDM := dmIntents[intent]; (!dm && isDM) || (dm && !isDM) {
				continue
			}
			if contains(events, src[i]) {
				intents |= intent
			}
		}
	}

	return intents
}
