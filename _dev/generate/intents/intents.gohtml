package intent

// Code generated - This file has been automatically generated by _dev/main.go - DO NOT EDIT.

import (
       "github.com/andersfylling/discordgateway/event"
)

type Type int

const (
{{- range .}}
    // {{.Name}}
    //  value: {{.Intent}}
    //  events:
    {{- range .Events }}
    //    - {{.Event}}
    {{- end}}
    {{.}} = Type(1 << {{.BitOffset}})
{{- end}}
)

const Sum Type = {{range .}}{{.}} | {{- end}} 0

var intentsToEventsMap = map[Type][]event.Type{
{{- range .}}
    {{.}}: []event.Type{
    {{- range .Events }}
        event.{{.Name}},
    {{- end}}
    },
{{- end}}
}

var emptyStruct struct{}
var dmIntents = map[Type]struct{}{
{{- range .}}
{{- if .IsDM }}
    {{.}}: emptyStruct,
{{- end}}
{{- end}}
}

func All() []Type {
    return []Type{
    {{- range .}}
        {{.}},
    {{- end}}
    }
}

func Valid(intent Type) bool {
    return intent >= 0
}

func Events(intent Type) []event.Type {
    if events, ok := intentsToEventsMap[intent]; ok {
        cpy := make([]event.Type, len(events))
        copy(cpy, events)
        return cpy
    }
    return nil
}

func Merge(intents ...Type) Type {
    var merged Type
    for i := range intents {
        merged |= intents[i]
    }
    return merged
}

func DMEventsToIntents(src []event.Type) Type {
    return eventsToIntents(src, true)
}

func GuildEventsToIntents(src []event.Type) Type {
    return eventsToIntents(src, false)
}

func eventsToIntents(src []event.Type, dm bool) (intents Type) {
    contains := func(haystack []event.Type, needle event.Type) bool {
        for i := range haystack {
            if haystack[i] == needle {
                return true
            }
        }
        return false
    }

    for i := range src {
        for intent, events := range intentsToEventsMap {
            if _, isDM := dmIntents[intent]; (!dm && isDM) || (dm && !isDM) {
                continue
            }
            if contains(events, src[i]) {
                intents |= intent
            }
        }
    }

    return intents
}
